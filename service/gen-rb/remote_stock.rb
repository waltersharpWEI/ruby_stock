#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'service1_types'

module RemoteStock
  class Client
    include ::Thrift::Client

    def sell_good(op)
      send_sell_good(op)
      return recv_sell_good()
    end

    def send_sell_good(op)
      send_message('sell_good', Sell_good_args, :op => op)
    end

    def recv_sell_good()
      result = receive_message(Sell_good_result)
      return result.success unless result.success.nil?
      raise result.se unless result.se.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sell_good failed: unknown result')
    end

    def buy_good(op)
      send_buy_good(op)
      return recv_buy_good()
    end

    def send_buy_good(op)
      send_message('buy_good', Buy_good_args, :op => op)
    end

    def recv_buy_good()
      result = receive_message(Buy_good_result)
      return result.success unless result.success.nil?
      raise result.se unless result.se.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'buy_good failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_sell_good(seqid, iprot, oprot)
      args = read_args(iprot, Sell_good_args)
      result = Sell_good_result.new()
      begin
        result.success = @handler.sell_good(args.op)
      rescue ::RemoteStockException => se
        result.se = se
      end
      write_result(result, oprot, 'sell_good', seqid)
    end

    def process_buy_good(seqid, iprot, oprot)
      args = read_args(iprot, Buy_good_args)
      result = Buy_good_result.new()
      begin
        result.success = @handler.buy_good(args.op)
      rescue ::RemoteStockException => se
        result.se = se
      end
      write_result(result, oprot, 'buy_good', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Sell_good_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OP = 1

    FIELDS = {
      OP => {:type => ::Thrift::Types::STRUCT, :name => 'op', :class => ::RemoteStockOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sell_good_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    SE = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I16, :name => 'success'},
      SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::RemoteStockException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Buy_good_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OP = 1

    FIELDS = {
      OP => {:type => ::Thrift::Types::STRUCT, :name => 'op', :class => ::RemoteStockOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Buy_good_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    SE = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I16, :name => 'success'},
      SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::RemoteStockException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

